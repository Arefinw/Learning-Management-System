{"ast":null,"code":"/**\n * @fileoverview This file provides services for interacting with the project API.\n * @description It contains functions for fetching project data from the backend.\n */\n\nimport axios from 'axios';\nconst API_URL = '/api/projects/';\n\n/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of project objects.\n */\nconst getProjectsByWorkspace = async (workspaceId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URL + 'workspace/' + workspaceId, config);\n  return response.data;\n};\n\n/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the project object.\n */\nconst getProjectById = async (projectId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URL + projectId, config);\n  return response.data;\n};\nconst projectService = {\n  getProjectsByWorkspace,\n  getProjectById\n};\nexport default projectService;","map":{"version":3,"names":["axios","API_URL","getProjectsByWorkspace","workspaceId","token","config","headers","Authorization","response","get","data","getProjectById","projectId","projectService"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/project/projectService.js"],"sourcesContent":["/**\n * @fileoverview This file provides services for interacting with the project API.\n * @description It contains functions for fetching project data from the backend.\n */\n\nimport axios from 'axios';\n\nconst API_URL = '/api/projects/';\n\n/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of project objects.\n */\nconst getProjectsByWorkspace = async (workspaceId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + 'workspace/' + workspaceId, config);\n  return response.data;\n};\n\n/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the project object.\n */\nconst getProjectById = async (projectId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + projectId, config);\n  return response.data;\n};\n\nconst projectService = {\n  getProjectsByWorkspace,\n  getProjectById,\n};\n\nexport default projectService;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gBAAgB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,KAAK,KAAK;EAC3D,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACR,OAAO,GAAG,YAAY,GAAGE,WAAW,EAAEE,MAAM,CAAC;EAC9E,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,SAAS,EAAER,KAAK,KAAK;EACjD,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACR,OAAO,GAAGW,SAAS,EAAEP,MAAM,CAAC;EAC7D,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMG,cAAc,GAAG;EACrBX,sBAAsB;EACtBS;AACF,CAAC;AAED,eAAeE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}