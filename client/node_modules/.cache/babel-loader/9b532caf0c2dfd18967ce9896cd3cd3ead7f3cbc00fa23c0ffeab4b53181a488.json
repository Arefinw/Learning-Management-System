{"ast":null,"code":"/**\n * @fileoverview This file defines the Redux slice for pathway management.\n * @description It handles fetching and managing pathway data, including pathways within a project and individual pathway details.\n */import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import pathwayService from'./pathwayService';const initialState={currentPathway:null,pathways:[],status:'idle',error:null};/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of pathway objects.\n */export const fetchPathwaysByProject=createAsyncThunk('pathway/fetchPathwaysByProject',async(projectId,thunkAPI)=>{try{const token=thunkAPI.getState().auth.token;return await pathwayService.getPathwaysByProject(projectId,token);}catch(error){const message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();return thunkAPI.rejectWithValue(message);}});/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The pathway object.\n */export const fetchPathwayById=createAsyncThunk('pathway/fetchPathwayById',async(pathwayId,thunkAPI)=>{try{const token=thunkAPI.getState().auth.token;return await pathwayService.getPathwayById(pathwayId,token);}catch(error){const message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();return thunkAPI.rejectWithValue(message);}});const pathwaySlice=createSlice({name:'pathway',initialState,reducers:{/**\n     * @description Resets the pathway slice state to its initial state.\n     * @param {object} state - The current state of the pathway slice.\n     */reset:state=>initialState},extraReducers:builder=>{builder.addCase(fetchPathwaysByProject.pending,state=>{state.status='loading';}).addCase(fetchPathwaysByProject.fulfilled,(state,action)=>{state.status='succeeded';state.pathways=action.payload;}).addCase(fetchPathwaysByProject.rejected,(state,action)=>{state.status='failed';state.error=action.payload;}).addCase(fetchPathwayById.pending,state=>{state.status='loading';}).addCase(fetchPathwayById.fulfilled,(state,action)=>{state.status='succeeded';state.currentPathway=action.payload;}).addCase(fetchPathwayById.rejected,(state,action)=>{state.status='failed';state.error=action.payload;});}});export const{reset}=pathwaySlice.actions;export default pathwaySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","pathwayService","initialState","currentPathway","pathways","status","error","fetchPathwaysByProject","projectId","thunkAPI","token","getState","auth","getPathwaysByProject","message","response","data","toString","rejectWithValue","fetchPathwayById","pathwayId","getPathwayById","pathwaySlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/pathway/pathwaySlice.js"],"sourcesContent":["/**\n * @fileoverview This file defines the Redux slice for pathway management.\n * @description It handles fetching and managing pathway data, including pathways within a project and individual pathway details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport pathwayService from './pathwayService';\n\nconst initialState = {\n  currentPathway: null,\n  pathways: [],\n  status: 'idle',\n  error: null,\n};\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of pathway objects.\n */\nexport const fetchPathwaysByProject = createAsyncThunk(\n  'pathway/fetchPathwaysByProject',\n  async (projectId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await pathwayService.getPathwaysByProject(projectId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The pathway object.\n */\nexport const fetchPathwayById = createAsyncThunk(\n  'pathway/fetchPathwayById',\n  async (pathwayId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await pathwayService.getPathwayById(pathwayId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nconst pathwaySlice = createSlice({\n  name: 'pathway',\n  initialState,\n  reducers: {\n    /**\n     * @description Resets the pathway slice state to its initial state.\n     * @param {object} state - The current state of the pathway slice.\n     */\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPathwaysByProject.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPathwaysByProject.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.pathways = action.payload;\n      })\n      .addCase(fetchPathwaysByProject.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(fetchPathwayById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPathwayById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentPathway = action.payload;\n      })\n      .addCase(fetchPathwayById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const { reset } = pathwaySlice.actions;\nexport default pathwaySlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}