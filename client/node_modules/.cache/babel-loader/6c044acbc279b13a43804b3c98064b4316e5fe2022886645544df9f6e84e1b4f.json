{"ast":null,"code":"/**\n * @fileoverview This file provides services for interacting with the pathway API.\n * @description It contains functions for fetching pathway data from the backend.\n */\n\nimport axios from 'axios';\nconst API_URL = '/api/pathways/';\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of pathway objects.\n */\nconst getPathwaysByProject = async (projectId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URL + 'project/' + projectId, config);\n  return response.data;\n};\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the pathway object.\n */\nconst getPathwayById = async (pathwayId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  const response = await axios.get(API_URL + pathwayId, config);\n  return response.data;\n};\nconst pathwayService = {\n  getPathwaysByProject,\n  getPathwayById\n};\nexport default pathwayService;","map":{"version":3,"names":["axios","API_URL","getPathwaysByProject","projectId","token","config","headers","Authorization","response","get","data","getPathwayById","pathwayId","pathwayService"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/pathway/pathwayService.js"],"sourcesContent":["/**\n * @fileoverview This file provides services for interacting with the pathway API.\n * @description It contains functions for fetching pathway data from the backend.\n */\n\nimport axios from 'axios';\n\nconst API_URL = '/api/pathways/';\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of pathway objects.\n */\nconst getPathwaysByProject = async (projectId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + 'project/' + projectId, config);\n  return response.data;\n};\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the pathway object.\n */\nconst getPathwayById = async (pathwayId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + pathwayId, config);\n  return response.data;\n};\n\nconst pathwayService = {\n  getPathwaysByProject,\n  getPathwayById,\n};\n\nexport default pathwayService;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gBAAgB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,KAAK,KAAK;EACvD,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACR,OAAO,GAAG,UAAU,GAAGE,SAAS,EAAEE,MAAM,CAAC;EAC1E,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,SAAS,EAAER,KAAK,KAAK;EACjD,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACR,OAAO,GAAGW,SAAS,EAAEP,MAAM,CAAC;EAC7D,OAAOG,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMG,cAAc,GAAG;EACrBX,oBAAoB;EACpBS;AACF,CAAC;AAED,eAAeE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}