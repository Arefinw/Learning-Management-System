{"ast":null,"code":"/**\n * @fileoverview This file provides services for interacting with the pathway API.\n * @description It contains functions for fetching pathway data from the backend.\n */import axios from'axios';const API_URL='/api/pathways/';/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of pathway objects.\n */const getPathwaysByProject=async(projectId,token)=>{const config={headers:{Authorization:`Bearer ${token}`}};const response=await axios.get(API_URL+'project/'+projectId,config);return response.data;};/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the pathway object.\n */const getPathwayById=async(pathwayId,token)=>{const config={headers:{Authorization:`Bearer ${token}`}};const response=await axios.get(API_URL+pathwayId,config);return response.data;};const pathwayService={getPathwaysByProject,getPathwayById};export default pathwayService;","map":{"version":3,"names":["axios","API_URL","getPathwaysByProject","projectId","token","config","headers","Authorization","response","get","data","getPathwayById","pathwayId","pathwayService"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/pathway/pathwayService.js"],"sourcesContent":["/**\n * @fileoverview This file provides services for interacting with the pathway API.\n * @description It contains functions for fetching pathway data from the backend.\n */\n\nimport axios from 'axios';\n\nconst API_URL = '/api/pathways/';\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<Array<object>>} - A promise that resolves to an array of pathway objects.\n */\nconst getPathwaysByProject = async (projectId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + 'project/' + projectId, config);\n  return response.data;\n};\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {string} token - The user's authentication token.\n * @returns {Promise<object>} - A promise that resolves to the pathway object.\n */\nconst getPathwayById = async (pathwayId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const response = await axios.get(API_URL + pathwayId, config);\n  return response.data;\n};\n\nconst pathwayService = {\n  getPathwaysByProject,\n  getPathwayById,\n};\n\nexport default pathwayService;\n"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAG,gBAAgB,CAEhC;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAAOC,SAAS,CAAEC,KAAK,GAAK,CACvD,KAAM,CAAAC,MAAM,CAAG,CACbC,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUH,KAAK,EAChC,CACF,CAAC,CACD,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACS,GAAG,CAACR,OAAO,CAAG,UAAU,CAAGE,SAAS,CAAEE,MAAM,CAAC,CAC1E,MAAO,CAAAG,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAG,KAAAA,CAAOC,SAAS,CAAER,KAAK,GAAK,CACjD,KAAM,CAAAC,MAAM,CAAG,CACbC,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUH,KAAK,EAChC,CACF,CAAC,CACD,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACS,GAAG,CAACR,OAAO,CAAGW,SAAS,CAAEP,MAAM,CAAC,CAC7D,MAAO,CAAAG,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED,KAAM,CAAAG,cAAc,CAAG,CACrBX,oBAAoB,CACpBS,cACF,CAAC,CAED,cAAe,CAAAE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}