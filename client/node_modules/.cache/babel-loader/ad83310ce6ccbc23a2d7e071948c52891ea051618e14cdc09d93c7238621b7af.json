{"ast":null,"code":"var _jsxFileName = \"/Users/aunogarafat/Downloads/Learning Management System/client/src/features/project/FolderTree.js\";\nimport React from 'react';\n\n/**\n * @description Fetches and displays the entire nested folder structure for a given workspace.\n * Highlights the current project and invokes a callback when a folder is clicked.\n * @param {object} props - Component props.\n * @param {string} props.workspaceId - The ID of the workspace to display the folder tree for.\n * @param {string} props.currentProjectId - The ID of the currently selected project.\n * @param {function} props.onProjectSelect - Callback function invoked when a project is selected.\n * @returns {JSX.Element} - The folder tree component.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FolderTree = ({\n  workspaceId,\n  currentProjectId,\n  onProjectSelect\n}) => {\n  // This is a placeholder. In a real application, you would fetch the folder structure\n  // based on the workspaceId and render it recursively.\n  const folders = [{\n    id: '1',\n    name: 'My First Project',\n    parent: null\n  }, {\n    id: '2',\n    name: 'Sub Project A',\n    parent: '1'\n  }, {\n    id: '3',\n    name: 'Sub Project B',\n    parent: '1'\n  }, {\n    id: '4',\n    name: 'Independent Project',\n    parent: null\n  }];\n  const renderFolder = folder => /*#__PURE__*/_jsxDEV(\"li\", {\n    style: {\n      fontWeight: folder.id === currentProjectId ? 'bold' : 'normal'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => onProjectSelect(folder.id),\n      children: folder.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), folders.filter(f => f.parent === folder.id).length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: folders.filter(f => f.parent === folder.id).map(renderFolder)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, folder.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Folder Tree (Workspace: \", workspaceId, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: folders.filter(f => f.parent === null).map(renderFolder)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = FolderTree;\nexport default FolderTree;\nvar _c;\n$RefreshReg$(_c, \"FolderTree\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FolderTree","workspaceId","currentProjectId","onProjectSelect","folders","id","name","parent","renderFolder","folder","style","fontWeight","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","filter","f","length","map","_c","$RefreshReg$"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/project/FolderTree.js"],"sourcesContent":["import React from 'react';\n\n/**\n * @description Fetches and displays the entire nested folder structure for a given workspace.\n * Highlights the current project and invokes a callback when a folder is clicked.\n * @param {object} props - Component props.\n * @param {string} props.workspaceId - The ID of the workspace to display the folder tree for.\n * @param {string} props.currentProjectId - The ID of the currently selected project.\n * @param {function} props.onProjectSelect - Callback function invoked when a project is selected.\n * @returns {JSX.Element} - The folder tree component.\n */\nconst FolderTree = ({ workspaceId, currentProjectId, onProjectSelect }) => {\n  // This is a placeholder. In a real application, you would fetch the folder structure\n  // based on the workspaceId and render it recursively.\n  const folders = [\n    { id: '1', name: 'My First Project', parent: null },\n    { id: '2', name: 'Sub Project A', parent: '1' },\n    { id: '3', name: 'Sub Project B', parent: '1' },\n    { id: '4', name: 'Independent Project', parent: null },\n  ];\n\n  const renderFolder = (folder) => (\n    <li key={folder.id} style={{ fontWeight: folder.id === currentProjectId ? 'bold' : 'normal' }}>\n      <span onClick={() => onProjectSelect(folder.id)}>{folder.name}</span>\n      {folders.filter(f => f.parent === folder.id).length > 0 && (\n        <ul>\n          {folders.filter(f => f.parent === folder.id).map(renderFolder)}\n        </ul>\n      )}\n    </li>\n  );\n\n  return (\n    <div>\n      <h3>Folder Tree (Workspace: {workspaceId})</h3>\n      <ul>\n        {folders.filter(f => f.parent === null).map(renderFolder)}\n      </ul>\n    </div>\n  );\n};\n\nexport default FolderTree;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC,gBAAgB;EAAEC;AAAgB,CAAC,KAAK;EACzE;EACA;EACA,MAAMC,OAAO,GAAG,CACd;IAAEC,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,kBAAkB;IAAEC,MAAM,EAAE;EAAK,CAAC,EACnD;IAAEF,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,eAAe;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC/C;IAAEF,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,eAAe;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC/C;IAAEF,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,qBAAqB;IAAEC,MAAM,EAAE;EAAK,CAAC,CACvD;EAED,MAAMC,YAAY,GAAIC,MAAM,iBAC1BV,OAAA;IAAoBW,KAAK,EAAE;MAAEC,UAAU,EAAEF,MAAM,CAACJ,EAAE,KAAKH,gBAAgB,GAAG,MAAM,GAAG;IAAS,CAAE;IAAAU,QAAA,gBAC5Fb,OAAA;MAAMc,OAAO,EAAEA,CAAA,KAAMV,eAAe,CAACM,MAAM,CAACJ,EAAE,CAAE;MAAAO,QAAA,EAAEH,MAAM,CAACH;IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EACpEb,OAAO,CAACc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACZ,MAAM,KAAKE,MAAM,CAACJ,EAAE,CAAC,CAACe,MAAM,GAAG,CAAC,iBACrDrB,OAAA;MAAAa,QAAA,EACGR,OAAO,CAACc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACZ,MAAM,KAAKE,MAAM,CAACJ,EAAE,CAAC,CAACgB,GAAG,CAACb,YAAY;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CACL;EAAA,GANMR,MAAM,CAACJ,EAAE;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAOd,CACL;EAED,oBACElB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,GAAI,0BAAwB,EAACX,WAAW,EAAC,GAAC;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/ClB,OAAA;MAAAa,QAAA,EACGR,OAAO,CAACc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACZ,MAAM,KAAK,IAAI,CAAC,CAACc,GAAG,CAACb,YAAY;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACK,EAAA,GA7BItB,UAAU;AA+BhB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}