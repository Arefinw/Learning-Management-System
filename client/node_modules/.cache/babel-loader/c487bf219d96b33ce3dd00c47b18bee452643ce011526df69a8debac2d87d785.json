{"ast":null,"code":"/**\n * @fileoverview This file defines the Redux slice for project management.\n * @description It handles fetching and managing project data, including projects within a workspace and individual project details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport projectService from './projectService';\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  pathwaysInProject: [],\n  status: 'idle',\n  error: null\n};\n\n/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of project objects.\n */\nexport const fetchProjectsByWorkspace = createAsyncThunk('project/fetchProjectsByWorkspace', async (workspaceId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    return await projectService.getProjectsByWorkspace(workspaceId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The project object.\n */\nexport const fetchProjectById = createAsyncThunk('project/fetchProjectById', async (projectId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    return await projectService.getProjectById(projectId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst projectSlice = createSlice({\n  name: 'project',\n  initialState,\n  reducers: {\n    /**\n     * @description Sets the current project in the state.\n     * @param {object} state - The current state of the project slice.\n     * @param {object} action - The action object containing the project payload.\n     */\n    setCurrentProject: (state, action) => {\n      state.currentProject = action.payload;\n    },\n    /**\n     * @description Resets the project slice state to its initial state.\n     * @param {object} state - The current state of the project slice.\n     */\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProjectsByWorkspace.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchProjectsByWorkspace.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.projects = action.payload;\n    }).addCase(fetchProjectsByWorkspace.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(fetchProjectById.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchProjectById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.currentProject = action.payload;\n    }).addCase(fetchProjectById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setCurrentProject,\n  reset\n} = projectSlice.actions;\nexport default projectSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","projectService","initialState","projects","currentProject","pathwaysInProject","status","error","fetchProjectsByWorkspace","workspaceId","thunkAPI","token","getState","auth","getProjectsByWorkspace","message","response","data","toString","rejectWithValue","fetchProjectById","projectId","getProjectById","projectSlice","name","reducers","setCurrentProject","state","action","payload","reset","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/project/projectSlice.js"],"sourcesContent":["/**\n * @fileoverview This file defines the Redux slice for project management.\n * @description It handles fetching and managing project data, including projects within a workspace and individual project details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport projectService from './projectService';\n\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  pathwaysInProject: [],\n  status: 'idle',\n  error: null,\n};\n\n/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of project objects.\n */\nexport const fetchProjectsByWorkspace = createAsyncThunk(\n  'project/fetchProjectsByWorkspace',\n  async (workspaceId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await projectService.getProjectsByWorkspace(workspaceId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The project object.\n */\nexport const fetchProjectById = createAsyncThunk(\n  'project/fetchProjectById',\n  async (projectId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await projectService.getProjectById(projectId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nconst projectSlice = createSlice({\n  name: 'project',\n  initialState,\n  reducers: {\n    /**\n     * @description Sets the current project in the state.\n     * @param {object} state - The current state of the project slice.\n     * @param {object} action - The action object containing the project payload.\n     */\n    setCurrentProject: (state, action) => {\n      state.currentProject = action.payload;\n    },\n    /**\n     * @description Resets the project slice state to its initial state.\n     * @param {object} state - The current state of the project slice.\n     */\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProjectsByWorkspace.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProjectsByWorkspace.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.projects = action.payload;\n      })\n      .addCase(fetchProjectsByWorkspace.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(fetchProjectById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProjectById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentProject = action.payload;\n      })\n      .addCase(fetchProjectById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const { setCurrentProject, reset } = projectSlice.actions;\nexport default projectSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}