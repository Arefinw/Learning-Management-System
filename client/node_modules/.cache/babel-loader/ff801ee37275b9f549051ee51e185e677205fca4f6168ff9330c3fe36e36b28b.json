{"ast":null,"code":"/**\n * @fileoverview This file defines the Redux slice for pathway management.\n * @description It handles fetching and managing pathway data, including pathways within a project and individual pathway details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport pathwayService from './pathwayService';\nconst initialState = {\n  currentPathway: null,\n  pathways: [],\n  status: 'idle',\n  error: null\n};\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of pathway objects.\n */\nexport const fetchPathwaysByProject = createAsyncThunk('pathway/fetchPathwaysByProject', async (projectId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    return await pathwayService.getPathwaysByProject(projectId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The pathway object.\n */\nexport const fetchPathwayById = createAsyncThunk('pathway/fetchPathwayById', async (pathwayId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    return await pathwayService.getPathwayById(pathwayId, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nconst pathwaySlice = createSlice({\n  name: 'pathway',\n  initialState,\n  reducers: {\n    /**\n     * @description Resets the pathway slice state to its initial state.\n     * @param {object} state - The current state of the pathway slice.\n     */\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPathwaysByProject.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPathwaysByProject.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.pathways = action.payload;\n    }).addCase(fetchPathwaysByProject.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(fetchPathwayById.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPathwayById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.currentPathway = action.payload;\n    }).addCase(fetchPathwayById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = pathwaySlice.actions;\nexport default pathwaySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","pathwayService","initialState","currentPathway","pathways","status","error","fetchPathwaysByProject","projectId","thunkAPI","token","getState","auth","getPathwaysByProject","message","response","data","toString","rejectWithValue","fetchPathwayById","pathwayId","getPathwayById","pathwaySlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/pathway/pathwaySlice.js"],"sourcesContent":["/**\n * @fileoverview This file defines the Redux slice for pathway management.\n * @description It handles fetching and managing pathway data, including pathways within a project and individual pathway details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport pathwayService from './pathwayService';\n\nconst initialState = {\n  currentPathway: null,\n  pathways: [],\n  status: 'idle',\n  error: null,\n};\n\n/**\n * @description Fetches all pathways for a given project.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of pathway objects.\n */\nexport const fetchPathwaysByProject = createAsyncThunk(\n  'pathway/fetchPathwaysByProject',\n  async (projectId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await pathwayService.getPathwaysByProject(projectId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n/**\n * @description Fetches a single pathway by its ID.\n * @param {string} pathwayId - The ID of the pathway.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The pathway object.\n */\nexport const fetchPathwayById = createAsyncThunk(\n  'pathway/fetchPathwayById',\n  async (pathwayId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await pathwayService.getPathwayById(pathwayId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nconst pathwaySlice = createSlice({\n  name: 'pathway',\n  initialState,\n  reducers: {\n    /**\n     * @description Resets the pathway slice state to its initial state.\n     * @param {object} state - The current state of the pathway slice.\n     */\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPathwaysByProject.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPathwaysByProject.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.pathways = action.payload;\n      })\n      .addCase(fetchPathwaysByProject.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(fetchPathwayById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPathwayById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentPathway = action.payload;\n      })\n      .addCase(fetchPathwayById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const { reset } = pathwaySlice.actions;\nexport default pathwaySlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}