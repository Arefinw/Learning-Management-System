{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch pathway by ID\nexport const fetchPathwayById = createAsyncThunk('pathway/fetchPathwayById', async (pathwayId, thunkAPI) => {\n  try {\n    // Implement API call to fetch pathway\n    // const response = await pathwayService.getPathwayById(pathwayId);\n    // return response.data;\n    return {\n      message: `Fetched pathway ${pathwayId} (mock)`\n    };\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nconst pathwaySlice = createSlice({\n  name: 'pathway',\n  initialState: {\n    currentPathway: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPathwayById.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchPathwayById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.currentPathway = action.payload; // Assuming payload is a pathway object\n    }).addCase(fetchPathwayById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport default pathwaySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchPathwayById","pathwayId","thunkAPI","message","error","rejectWithValue","pathwaySlice","name","initialState","currentPathway","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/pathway/pathwaySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch pathway by ID\nexport const fetchPathwayById = createAsyncThunk(\n  'pathway/fetchPathwayById',\n  async (pathwayId, thunkAPI) => {\n    try {\n      // Implement API call to fetch pathway\n      // const response = await pathwayService.getPathwayById(pathwayId);\n      // return response.data;\n      return { message: `Fetched pathway ${pathwayId} (mock)` };\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nconst pathwaySlice = createSlice({\n  name: 'pathway',\n  initialState: {\n    currentPathway: null,\n    status: 'idle',\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPathwayById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchPathwayById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentPathway = action.payload; // Assuming payload is a pathway object\n      })\n      .addCase(fetchPathwayById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport default pathwaySlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC9C,0BAA0B,EAC1B,OAAOE,SAAS,EAAEC,QAAQ,KAAK;EAC7B,IAAI;IACF;IACA;IACA;IACA,OAAO;MAAEC,OAAO,EAAE,mBAAmBF,SAAS;IAAU,CAAC;EAC3D,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAOF,QAAQ,CAACG,eAAe,CAACD,KAAK,CAACD,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,MAAMG,YAAY,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,cAAc,EAAE,IAAI;IACpBC,MAAM,EAAE,MAAM;IACdN,KAAK,EAAE;EACT,CAAC;EACDO,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,gBAAgB,CAACe,OAAO,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACd,gBAAgB,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1BM,KAAK,CAACP,cAAc,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC,CACDL,OAAO,CAACd,gBAAgB,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACZ,KAAK,GAAGc,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeb,YAAY,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}