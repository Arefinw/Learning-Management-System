{"ast":null,"code":"/**\n * @fileoverview This file defines the Redux slice for project management.\n * @description It handles fetching and managing project data, including projects within a workspace and individual project details.\n */import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import projectService from'./projectService';const initialState={projects:[],currentProject:null,pathwaysInProject:[],status:'idle',error:null};/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of project objects.\n */export const fetchProjectsByWorkspace=createAsyncThunk('project/fetchProjectsByWorkspace',async(workspaceId,thunkAPI)=>{try{const token=thunkAPI.getState().auth.token;return await projectService.getProjectsByWorkspace(workspaceId,token);}catch(error){const message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();return thunkAPI.rejectWithValue(message);}});/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The project object.\n */export const fetchProjectById=createAsyncThunk('project/fetchProjectById',async(projectId,thunkAPI)=>{try{const token=thunkAPI.getState().auth.token;return await projectService.getProjectById(projectId,token);}catch(error){const message=error.response&&error.response.data&&error.response.data.message||error.message||error.toString();return thunkAPI.rejectWithValue(message);}});const projectSlice=createSlice({name:'project',initialState,reducers:{/**\n     * @description Sets the current project in the state.\n     * @param {object} state - The current state of the project slice.\n     * @param {object} action - The action object containing the project payload.\n     */setCurrentProject:(state,action)=>{state.currentProject=action.payload;},/**\n     * @description Resets the project slice state to its initial state.\n     * @param {object} state - The current state of the project slice.\n     */reset:state=>initialState},extraReducers:builder=>{builder.addCase(fetchProjectsByWorkspace.pending,state=>{state.status='loading';}).addCase(fetchProjectsByWorkspace.fulfilled,(state,action)=>{state.status='succeeded';state.projects=action.payload;}).addCase(fetchProjectsByWorkspace.rejected,(state,action)=>{state.status='failed';state.error=action.payload;}).addCase(fetchProjectById.pending,state=>{state.status='loading';}).addCase(fetchProjectById.fulfilled,(state,action)=>{state.status='succeeded';state.currentProject=action.payload;}).addCase(fetchProjectById.rejected,(state,action)=>{state.status='failed';state.error=action.payload;});}});export const{setCurrentProject,reset}=projectSlice.actions;export default projectSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","projectService","initialState","projects","currentProject","pathwaysInProject","status","error","fetchProjectsByWorkspace","workspaceId","thunkAPI","token","getState","auth","getProjectsByWorkspace","message","response","data","toString","rejectWithValue","fetchProjectById","projectId","getProjectById","projectSlice","name","reducers","setCurrentProject","state","action","payload","reset","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/aunogarafat/Downloads/Learning Management System/client/src/features/project/projectSlice.js"],"sourcesContent":["/**\n * @fileoverview This file defines the Redux slice for project management.\n * @description It handles fetching and managing project data, including projects within a workspace and individual project details.\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport projectService from './projectService';\n\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  pathwaysInProject: [],\n  status: 'idle',\n  error: null,\n};\n\n/**\n * @description Fetches all projects for a given workspace.\n * @param {string} workspaceId - The ID of the workspace.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<Array<object>>} - An array of project objects.\n */\nexport const fetchProjectsByWorkspace = createAsyncThunk(\n  'project/fetchProjectsByWorkspace',\n  async (workspaceId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await projectService.getProjectsByWorkspace(workspaceId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n/**\n * @description Fetches a single project by its ID.\n * @param {string} projectId - The ID of the project.\n * @param {object} thunkAPI - The Redux Thunk API object.\n * @returns {Promise<object>} - The project object.\n */\nexport const fetchProjectById = createAsyncThunk(\n  'project/fetchProjectById',\n  async (projectId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.token;\n      return await projectService.getProjectById(projectId, token);\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nconst projectSlice = createSlice({\n  name: 'project',\n  initialState,\n  reducers: {\n    /**\n     * @description Sets the current project in the state.\n     * @param {object} state - The current state of the project slice.\n     * @param {object} action - The action object containing the project payload.\n     */\n    setCurrentProject: (state, action) => {\n      state.currentProject = action.payload;\n    },\n    /**\n     * @description Resets the project slice state to its initial state.\n     * @param {object} state - The current state of the project slice.\n     */\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProjectsByWorkspace.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProjectsByWorkspace.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.projects = action.payload;\n      })\n      .addCase(fetchProjectsByWorkspace.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(fetchProjectById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProjectById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentProject = action.payload;\n      })\n      .addCase(fetchProjectById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const { setCurrentProject, reset } = projectSlice.actions;\nexport default projectSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAE7C,KAAM,CAAAC,YAAY,CAAG,CACnBC,QAAQ,CAAE,EAAE,CACZC,cAAc,CAAE,IAAI,CACpBC,iBAAiB,CAAE,EAAE,CACrBC,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,IACT,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,wBAAwB,CAAGR,gBAAgB,CACtD,kCAAkC,CAClC,MAAOS,WAAW,CAAEC,QAAQ,GAAK,CAC/B,GAAI,CACF,KAAM,CAAAC,KAAK,CAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACF,KAAK,CAC5C,MAAO,MAAM,CAAAV,cAAc,CAACa,sBAAsB,CAACL,WAAW,CAAEE,KAAK,CAAC,CACxE,CAAE,MAAOJ,KAAK,CAAE,CACd,KAAM,CAAAQ,OAAO,CACVR,KAAK,CAACS,QAAQ,EACbT,KAAK,CAACS,QAAQ,CAACC,IAAI,EACnBV,KAAK,CAACS,QAAQ,CAACC,IAAI,CAACF,OAAO,EAC7BR,KAAK,CAACQ,OAAO,EACbR,KAAK,CAACW,QAAQ,CAAC,CAAC,CAClB,MAAO,CAAAR,QAAQ,CAACS,eAAe,CAACJ,OAAO,CAAC,CAC1C,CACF,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,gBAAgB,CAAGpB,gBAAgB,CAC9C,0BAA0B,CAC1B,MAAOqB,SAAS,CAAEX,QAAQ,GAAK,CAC7B,GAAI,CACF,KAAM,CAAAC,KAAK,CAAGD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACF,KAAK,CAC5C,MAAO,MAAM,CAAAV,cAAc,CAACqB,cAAc,CAACD,SAAS,CAAEV,KAAK,CAAC,CAC9D,CAAE,MAAOJ,KAAK,CAAE,CACd,KAAM,CAAAQ,OAAO,CACVR,KAAK,CAACS,QAAQ,EACbT,KAAK,CAACS,QAAQ,CAACC,IAAI,EACnBV,KAAK,CAACS,QAAQ,CAACC,IAAI,CAACF,OAAO,EAC7BR,KAAK,CAACQ,OAAO,EACbR,KAAK,CAACW,QAAQ,CAAC,CAAC,CAClB,MAAO,CAAAR,QAAQ,CAACS,eAAe,CAACJ,OAAO,CAAC,CAC1C,CACF,CACF,CAAC,CAED,KAAM,CAAAQ,YAAY,CAAGxB,WAAW,CAAC,CAC/ByB,IAAI,CAAE,SAAS,CACftB,YAAY,CACZuB,QAAQ,CAAE,CACR;AACJ;AACA;AACA;AACA,OACIC,iBAAiB,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACpCD,KAAK,CAACvB,cAAc,CAAGwB,MAAM,CAACC,OAAO,CACvC,CAAC,CACD;AACJ;AACA;AACA,OACIC,KAAK,CAAGH,KAAK,EAAKzB,YACpB,CAAC,CACD6B,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAACzB,wBAAwB,CAAC0B,OAAO,CAAGP,KAAK,EAAK,CACpDA,KAAK,CAACrB,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACD2B,OAAO,CAACzB,wBAAwB,CAAC2B,SAAS,CAAE,CAACR,KAAK,CAAEC,MAAM,GAAK,CAC9DD,KAAK,CAACrB,MAAM,CAAG,WAAW,CAC1BqB,KAAK,CAACxB,QAAQ,CAAGyB,MAAM,CAACC,OAAO,CACjC,CAAC,CAAC,CACDI,OAAO,CAACzB,wBAAwB,CAAC4B,QAAQ,CAAE,CAACT,KAAK,CAAEC,MAAM,GAAK,CAC7DD,KAAK,CAACrB,MAAM,CAAG,QAAQ,CACvBqB,KAAK,CAACpB,KAAK,CAAGqB,MAAM,CAACC,OAAO,CAC9B,CAAC,CAAC,CACDI,OAAO,CAACb,gBAAgB,CAACc,OAAO,CAAGP,KAAK,EAAK,CAC5CA,KAAK,CAACrB,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACD2B,OAAO,CAACb,gBAAgB,CAACe,SAAS,CAAE,CAACR,KAAK,CAAEC,MAAM,GAAK,CACtDD,KAAK,CAACrB,MAAM,CAAG,WAAW,CAC1BqB,KAAK,CAACvB,cAAc,CAAGwB,MAAM,CAACC,OAAO,CACvC,CAAC,CAAC,CACDI,OAAO,CAACb,gBAAgB,CAACgB,QAAQ,CAAE,CAACT,KAAK,CAAEC,MAAM,GAAK,CACrDD,KAAK,CAACrB,MAAM,CAAG,QAAQ,CACvBqB,KAAK,CAACpB,KAAK,CAAGqB,MAAM,CAACC,OAAO,CAC9B,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEH,iBAAiB,CAAEI,KAAM,CAAC,CAAGP,YAAY,CAACc,OAAO,CAChE,cAAe,CAAAd,YAAY,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}